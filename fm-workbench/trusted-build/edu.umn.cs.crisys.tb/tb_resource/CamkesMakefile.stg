import "Common.stg"


////////////////////////////////////////////////////////////////////////////
//
// CamkesMakefile.stg
//
// Template makefile for CAmkES compilation.
//
////////////////////////////////////////////////////////////////////////////

camkesMakefilePurpose() ::= <<
# TODO: add DARPA license?
#
# This file is an automatically generated makefile from the AADL build
# system designed for the CAmkES build system.  It will work for projects
# in which all C files and libraries are "known" to the AADL file.
# However, for projects with more complex dependencies and "external"
# components that are not described in the AADL file, it will need to be
# extended.
#
>>

camkesMakefileBlockComment(date, path, purpose) ::= <<
############################################################################
#
#   ***AUTOGENERATED CODE (modify if you need to :-) ***
#
<purpose>
#
############################################################################
>>

filePrefix(name, date, path) ::= <<
<camkesMakefileBlockComment(date, path, camkesMakefilePurpose())>

>>

writeComponentName(name) ::= <<
<name>_CFILES :=  \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/<name>/src/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/<name>/src/plat/${PLAT}/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/<name>/src/arch/${ARCH}/*.c))

<name>_HFILES := \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/<name>/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/include/*.h))

<name>_ASMFILES := \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/<name>/crt/arch-${ARCH}/crt0.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/<name>/src/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/<name>/src/arch/${ARCH}/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/<name>/src/plat/${PLAT}/*.S))

>>

writeRustLibDir(name, rustLibrary) ::= <<
<if(rustLibrary)>
<name>_RUST := ${SOURCE_DIR}/components/<rustLibrary>
<endif>

>>

/*
*  Silly but necessary comment because XText is confused by /* in earlier definitions.
*/

writeComponent(component) ::= <<

<writeComponentName(component.normalizedName)>
<writeRustLibDir(component.normalizedName, component.componentRustLibName)>
<component.portList:{ p | <p.camkesAddMakeFilePortDefinitions>}>

>>

camkesMakefileBody(model) ::= <<

TARGETS := $(notdir ${SOURCE_DIR}).cdl
ADL := <model.camkesSystemAssemblyFileName>

# For time server: subdirectory containing extra templates.
TEMPLATES := ../../projects/templates ../../projects/global-components/templates

include TimeServer/TimeServer.mk


<model.threadImplementations:writeComponent()>

<if(model.threadCalendar.hasDispatchers)>
<writeComponentName(model.threadCalendar.periodicDispatcherComponentName)>
<endif>

include ${PWD}/tools/camkes/camkes.mk

>>


filePostfix(name, path) ::= <<
>>

camkesKbuild(name, CapName) ::= <<
apps-$(CONFIG_APP_<CapName>) += <name>
<name>: libsel4 libmuslc libsel4platsupport libsel4muslccamkes libsel4camkes libsel4sync libsel4debug libsel4bench
>>


camkesKconfig(name, CapName) ::= <<
config APP_<CapName>
    bool "<name> (from AADL)"
    default n
    select APP_CAMKES_EXECUTIVE
    help
        <name> (from AADL).
        
config APP_<CapName>_TB_DEBUG
    bool "Enable trusted build debugging for the <CapName> application"
    default n
    depends on APP_<CapName> && PRINTING
    help
        Enable trusted build debugging for the <CapName> application.
>>
