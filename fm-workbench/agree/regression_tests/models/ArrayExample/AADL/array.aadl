package array
public
	with Base_Types;
	with Data_Model;
	with SW_Properties;
	
	data struct_with_array
	end struct_with_array;
	
	data ranged_type extends Base_Types::Integer
		properties
			Data_Model::Integer_Range => SW_Properties::MIN_LONGITUDE .. SW_Properties::MAX_LONGITUDE;
	end ranged_type;
	
	data implementation struct_with_array.i
		subcomponents
			array : data Base_Types::Integer[4];
			ranged : data ranged_type;
	end struct_with_array.i;
	
	data array_type
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Base_Types::Integer));
			Data_Model::Dimension => (4);
	end array_type;
	
	data simple_struct
	end simple_struct;
	
	data implementation simple_struct.i
		subcomponents
			val : data Base_Types::Integer;
	end simple_struct.i;
	
	data implementation simple_struct.i2
		subcomponents
			val : data Base_Types::Integer;
			array : data Base_Types::Integer[10];
			booga: data struct_with_array.i;
	end simple_struct.i2;
	
	data simple_struct_array
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (simple_struct.i));
			Data_Model::Dimension => (4);
	end simple_struct_array;
	
	data simple_int_array
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Base_Types::Integer));
			Data_Model::Dimension => (4);
	end simple_int_array;
		
	data simple_struct_array_DIM
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (simple_struct.i));
			Data_Model::Dimension => (SW_Properties::MAP_DIMENSION);
	end simple_struct_array_DIM;
	
	annex agree {**
--		-- Type Error: cannot assign structure to integer literal
--		fun array_test0(t : struct_with_array.i) : bool =
--			t = 10;
--			
--		-- Type Error: cannot assign array to integer literal
--		fun array_test1(t : struct_with_array.i) : bool =
--			t.array = 10;
		
		-- Correct: assign integer array element to integer literal
		
		fun array_foo(t : struct_with_array.i) : int[4] = t.array;
		
		fun array_test2(t : struct_with_array.i) : bool = 
			t.array[0] = 10;
			
		fun array_test3(t : array_type) : bool = 
			t[2] = 10;

		fun array_test4(t : array_type) : bool =
			forall i in indices(t), t[i] < 10;
			
		fun array_test5(t : simple_struct_array) : bool =
			forall i in t, i.val < 10;
			
		fun array_test6(t : simple_struct_array) : bool =
			forall i in indices(t), (t[i]).val < 10;
			
		fun support_array_test7(x : simple_struct.i) : bool = x.val < 10;
		
		fun array_test7(t : simple_struct_array) : bool = 
			forall i in t, support_array_test7(i);
			
		fun array_test8(t : simple_struct_array) : bool = 
			forall i in indices(t), support_array_test7(t[i]);
		
		fun array_test9(t : simple_struct_array_DIM) : bool =
			forall i in indices(t), support_array_test7(t[i]);
			
		fun array_test10(t : simple_struct.i2) : bool =
			forall i in indices(t.array), (t.array)[i] < 10;
			
		fun array_test11(t : simple_struct.i2) : bool =
			forall i in t.array, i < 10;
			
		fun tll0(x: int) : int = SW_Properties::MAX_ALTITUDE;
		
		fun tll1(x: int) : real = SW_Properties::MAX_LATTITUDE;
			
		fun ranged_type_test0(r : ranged_type) : bool = 
			r != SW_Properties::MAX_ALTITUDE;
			
		fun ranged_type_test1(r : ranged_type) : bool =
			r != 10;
				
		fun ranged_type_test2(r : struct_with_array.i) : bool =
			r.ranged < 10;
			
		fun tll2(arr: simple_int_array) : bool = arr = [|5, 5, 5, 5|] ;
			
			
						
	**};

		thread CompTest
			
		annex agree {**
				
			eq qq: int[190,200];
			eq ww: int[180,181];
			eq bb : bool = ww != qq;
			
			eq a0 : int = 1;
			fun idnt(x: int) : int = x;
			fun something(xs: int[3]) : int[3] = xs;
			eq a1 : int[3] = [| 1, 2, 3 |];
			eq b1 : bool = forall ya in a1, ya > 0;
			eq b8 : bool = forall yb in a1, yb > 0;
			eq a2 : int[3] = a1[|0 := 2; 1 := 3 |];
			eq b2 : bool = exists x in a1, (x > 0);
			eq a3 : bool[3] = foreach q in a1, (q > 0);
			eq i0 : int = foldl g in a1 into asdf = 0 , asdf + g;
			eq i2 : int = foldr p in a1 into acc = 0 , acc + p;
			eq b3 : bool = forall v in a2, v > 0; 
			eq a4 : int[3] = foreach i in  indices(a3), if a3[i] then 1 else 0;
			type roo = struct {g : int, y: int};
			eq r1 : roo = roo {g = 7; y = 8};
			eq i1 : int = r1.y;
			eq r2 : roo = r1{y := 4};
			eq a5 : roo[2] = [| (roo {g = 4; y=2}), (roo {g = 5; y=3}) |];
			eq i3 : int = a4[0];
			eq i4 : int = (a5[0]).y;

			
		**};
		
	end CompTest;
	
end array;