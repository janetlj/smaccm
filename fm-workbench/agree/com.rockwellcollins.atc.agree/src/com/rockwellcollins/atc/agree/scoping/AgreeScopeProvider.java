/*
 * generated by Xtext
 */
package com.rockwellcollins.atc.agree.scoping;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.FilteringScope;
import org.osate.aadl2.Aadl2Package;
import org.osate.aadl2.AadlPackage;
import org.osate.aadl2.AnnexLibrary;
import org.osate.aadl2.AnnexSubclause;
import org.osate.aadl2.Classifier;
import org.osate.aadl2.ComponentClassifier;
import org.osate.aadl2.ComponentImplementation;
import org.osate.aadl2.ComponentType;
import org.osate.aadl2.DataImplementation;
import org.osate.aadl2.DataType;
import org.osate.aadl2.Element;
import org.osate.aadl2.Feature;
import org.osate.aadl2.NamedElement;
import org.osate.aadl2.Property;
import org.osate.aadl2.PropertyAssociation;
import org.osate.aadl2.PropertySet;
import org.osate.aadl2.PublicPackageSection;
import org.osate.aadl2.Subcomponent;
import org.osate.annexsupport.AnnexUtil;

import com.rockwellcollins.atc.agree.AgreeTypeSystem;
import com.rockwellcollins.atc.agree.agree.Abstraction;
import com.rockwellcollins.atc.agree.agree.AbstractionRef;
import com.rockwellcollins.atc.agree.agree.AgreeContract;
import com.rockwellcollins.atc.agree.agree.AgreeContractLibrary;
import com.rockwellcollins.atc.agree.agree.AgreeContractSubclause;
import com.rockwellcollins.atc.agree.agree.AgreeLibrary;
import com.rockwellcollins.atc.agree.agree.AgreePackage;
import com.rockwellcollins.atc.agree.agree.CallExpr;
import com.rockwellcollins.atc.agree.agree.ComponentRef;
import com.rockwellcollins.atc.agree.agree.ConnectionStatement;
import com.rockwellcollins.atc.agree.agree.CustomType;
import com.rockwellcollins.atc.agree.agree.EnumID;
import com.rockwellcollins.atc.agree.agree.EnumStatement;
import com.rockwellcollins.atc.agree.agree.EqStatement;
import com.rockwellcollins.atc.agree.agree.ExistsExpr;
import com.rockwellcollins.atc.agree.agree.FnDef;
import com.rockwellcollins.atc.agree.agree.FoldLeftExpr;
import com.rockwellcollins.atc.agree.agree.FoldRightExpr;
import com.rockwellcollins.atc.agree.agree.ForallExpr;
import com.rockwellcollins.atc.agree.agree.ForeachExpr;
import com.rockwellcollins.atc.agree.agree.GetPropertyExpr;
import com.rockwellcollins.atc.agree.agree.InputStatement;
import com.rockwellcollins.atc.agree.agree.LibraryFnDef;
import com.rockwellcollins.atc.agree.agree.LiftStatement;
import com.rockwellcollins.atc.agree.agree.LinearizationDef;
import com.rockwellcollins.atc.agree.agree.NamedElmExpr;
import com.rockwellcollins.atc.agree.agree.NodeDef;
import com.rockwellcollins.atc.agree.agree.OrderStatement;
import com.rockwellcollins.atc.agree.agree.ProjectionExpr;
import com.rockwellcollins.atc.agree.agree.RecordDef;
import com.rockwellcollins.atc.agree.agree.RecordLitExpr;
import com.rockwellcollins.atc.agree.agree.RecordUpdateExpr;
import com.rockwellcollins.atc.agree.agree.SpecStatement;
import com.rockwellcollins.atc.agree.agree.SubcomponentRef;
import com.rockwellcollins.atc.agree.agree.SynchStatement;
import com.rockwellcollins.atc.agree.agree.ThisRef;
import com.rockwellcollins.atc.agree.agree.Type;

/**
 * This class contains custom scoping description.
 *
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping on how and when
 * to use it
 *
 */
public class AgreeScopeProvider extends org.osate.xtext.aadl2.properties.scoping.PropertiesScopeProvider {

	IScope scope_NamedElement(ForallExpr ctx, EReference ref) {
		List<NamedElement> bs = new ArrayList<NamedElement>();
		bs.add(ctx.getBinding());
		return Scopes.scopeFor(bs, getScope(ctx.eContainer(), ref));
	}

	IScope scope_NamedElement(ExistsExpr ctx, EReference ref) {
		List<NamedElement> bs = new ArrayList<NamedElement>();
		bs.add(ctx.getBinding());
		return Scopes.scopeFor(bs, getScope(ctx.eContainer(), ref));
	}

	IScope scope_NamedElement(ForeachExpr ctx, EReference ref) {
		List<NamedElement> bs = new ArrayList<NamedElement>();
		bs.add(ctx.getBinding());
		return Scopes.scopeFor(bs, getScope(ctx.eContainer(), ref));
	}

	IScope scope_NamedElement(FoldLeftExpr ctx, EReference ref) {
		List<NamedElement> bs = new ArrayList<NamedElement>();
		bs.add(ctx.getAccumulator());
		bs.add(ctx.getBinding());
		return Scopes.scopeFor(bs, getScope(ctx.eContainer(), ref));
	}

	IScope scope_NamedElement(FoldRightExpr ctx, EReference ref) {
		List<NamedElement> bs = new ArrayList<NamedElement>();
		bs.add(ctx.getAccumulator());
		bs.add(ctx.getBinding());
		return Scopes.scopeFor(bs, getScope(ctx.eContainer(), ref));
	}

	IScope scope_NamedElement(FnDef ctx, EReference ref) {
		return Scopes.scopeFor(ctx.getArgs(), getScope(ctx.eContainer(), ref));
	}

	IScope scope_NamedElement(LinearizationDef ctx, EReference ref) {
		return Scopes.scopeFor(ctx.getArgs(), getScope(ctx.eContainer(), ref));
	}

	IScope scope_NamedElement(LibraryFnDef ctx, EReference ref) {
		return Scopes.scopeFor(ctx.getArgs(), getScope(ctx.eContainer(), ref));
	}

	IScope scope_RecordLitExpr_args(RecordLitExpr ctx, EReference ref) {
		NamedElement recDef = ctx.getRecordType().getLeaf();
		Set<Element> components = new HashSet<>();
		if (recDef instanceof DataImplementation) {
			components.addAll(((DataImplementation) recDef).getAllSubcomponents());
			return Scopes.scopeFor(components);
		} else if (recDef instanceof RecordDef) {
			components.addAll(((RecordDef) recDef).getArgs());
			return Scopes.scopeFor(components);
		}
		return IScope.NULLSCOPE;
	}


	List<NamedElement> getFieldsFromRecordType(Type typ) {
		if (typ instanceof CustomType) {

			NamedElement leaf = ((CustomType) typ).getLeaf();
			if (leaf instanceof RecordDef) {
				List<NamedElement> result = new LinkedList<>();
				result.addAll(((RecordDef) leaf).getArgs());
				return result;

			} else if (leaf instanceof DataImplementation) {
				List<NamedElement> result = new LinkedList<>();
				ComponentImplementation componentImplementation = (ComponentImplementation) leaf;
				List<Subcomponent> subs = componentImplementation.getAllSubcomponents();
				result.addAll(subs);
				return result;

			} else if (leaf instanceof ComponentImplementation) {

				List<NamedElement> result = new LinkedList<>();
				Classifier parent = ((ComponentImplementation) leaf).getType();
				List<Feature> features = parent.getAllFeatures();
				result.addAll(features);
				return result;

			} else if (leaf instanceof Classifier) {

				List<NamedElement> result = new LinkedList<>();
				List<Feature> features = ((Classifier) leaf).getAllFeatures();
				result.addAll(features);
				return result;

			} else {
				return new LinkedList<>();
			}
		}
		return new LinkedList<>();

	}



	IScope scope_AbstractionRef_stem(AbstractionRef ctx, EReference ref) {
		return Scopes.scopeFor(new ArrayList<EObject>(), getScope(ctx.eContainer(), ref));
	}

	IScope scope_AbstractionRef_leaf(AbstractionRef ctx, EReference ref) {
		NamedElement stem = ctx.getStem();

		if (stem == null) {
			CallExpr ce = (CallExpr) ctx.eContainer();
			Classifier cc = ce.getContainingClassifier();
			List<Abstraction> abstractions = EcoreUtil2.getAllContentsOfType(cc,
					Abstraction.class);

			if (cc instanceof ComponentImplementation) {
				Classifier c = ((ComponentImplementation) cc).getType();
				List<Abstraction> parentAbstractions = EcoreUtil2.getAllContentsOfType(c, Abstraction.class);
				abstractions.addAll(parentAbstractions);
			}

			return Scopes.scopeFor(abstractions);
		} else if (stem instanceof AadlPackage || stem instanceof Classifier) {
			List<Abstraction> abstractions = EcoreUtil2.getAllContentsOfType(stem, Abstraction.class);


			return Scopes.scopeFor(abstractions);
		}
		return IScope.NULLSCOPE;

	}

	IScope scope_LiftStatement_subcomp(LiftStatement ctx, EReference ref) {
		ComponentImplementation container = ctx.getContainingComponentImpl();
		return Scopes.scopeFor(container.getAllSubcomponents());
	}

	IScope scope_NamedElement(NodeDef ctx, EReference ref) {
		Set<Element> components = new HashSet<>();
		components.addAll(ctx.getArgs());
		components.addAll(ctx.getRets());
		components.addAll(ctx.getNodeBody().getLocs());
		IScope outer = new FilteringScope(getScope(ctx.eContainer(), ref),
				input -> (AgreePackage.eINSTANCE.getNodeDef().isSuperTypeOf(input.getEClass())
						|| AgreePackage.eINSTANCE.getRecordDef().isSuperTypeOf(input.getEClass())
						|| AgreePackage.eINSTANCE.getConstStatement().isSuperTypeOf(input.getEClass())
						|| Aadl2Package.eINSTANCE.getAadlPackage().isSuperTypeOf(input.getEClass())
						|| Aadl2Package.eINSTANCE.getComponentClassifier().isSuperTypeOf(input.getEClass())));
		return Scopes.scopeFor(components, outer);
	}

	protected IScope scope_NamedElement(AgreeContract ctx, EReference ref) {
		Set<Element> components = new HashSet<>();
		components.addAll(getAllElementsFromSpecs(ctx.getSpecs()));
		return Scopes.scopeFor(components, getAadlScope(ctx.eContainer(), ref));
	}

	IScope scope_NamedElement(ConnectionStatement ctx, EReference ref) {
		EObject container = ctx.getContainingClassifier();
		IScope outerScope = IScope.NULLSCOPE;
		if (container instanceof ComponentImplementation) {
			ComponentImplementation compImpl = (ComponentImplementation) container;
			outerScope = Scopes.scopeFor(compImpl.getAllConnections());
		}
		return outerScope;
	}

	IScope scope_NamedElement(OrderStatement ctx, EReference ref) {
		EObject container = ctx.getContainingClassifier();

		IScope outerScope = IScope.NULLSCOPE;
		if (container instanceof ComponentImplementation) {
			ComponentImplementation compImpl = (ComponentImplementation) container;
			outerScope = Scopes.scopeFor(compImpl.getAllSubcomponents());
		}
		return outerScope;
	}

	IScope scope_NamedElement(SynchStatement ctx, EReference ref) {
		EObject container = ctx.getContainingClassifier();
		while (!(container instanceof ComponentClassifier)) {
			container = container.eContainer();
		}

		if (container instanceof ComponentImplementation) {
			return Scopes.scopeFor(((ComponentImplementation) container).getAllSubcomponents());
		}
		return IScope.NULLSCOPE;
	}

	protected IScope scope_CustomType_stem(CustomType ctx, EReference ref) {
		return Scopes.scopeFor(new LinkedList<EObject>());
	}

	protected IScope scope_CustomType_leaf(CustomType ctx, EReference ref) {
		if (ctx.getStem() == null) {
			return getScope(ctx.eContainer(), ref);
		} else {
			NamedElement stem = ctx.getStem();
			return Scopes.scopeFor(getAllAgreeElements(stem));
		}
	}

	protected IScope scope_NamedElmExpr_namedElm(NamedElmExpr ctx, EReference ref) {

		EObject o = ctx.eContainer();
		while (!(o instanceof AadlPackage) && o != null) {
			o = o.eContainer();
		}

		AadlPackage pkg = (AadlPackage) o;
		List<EnumStatement> es = EcoreUtil2.getAllContentsOfType(pkg, EnumStatement.class);

		List<EnumID> ids = new ArrayList<EnumID>();
		for (EnumStatement e : es) {
			ids.addAll(e.getEnums());
		}
		return Scopes.scopeFor(ids, getScope(ctx.eContainer(), ref));
	}



	protected IScope scope_GetPropertyExpr_prop(GetPropertyExpr ctx, EReference ref) {

		ComponentRef cr = ctx.getComponentRef();
		if (cr instanceof ThisRef) {
			List<Property> ps = new ArrayList<>();

			EObject container = ctx.getContainingClassifier();
			while (container != null) {
				if (container instanceof Classifier) {
					List<PropertyAssociation> pas = ((Classifier) container).getAllPropertyAssociations();
					for (PropertyAssociation pa : pas) {
						ps.add(pa.getProperty());
					}
					container = ((Classifier) container).eContainer();
				} else if (container instanceof AadlPackage) {
					for (PropertySet propSet : EcoreUtil2.getAllContentsOfType(container, PropertySet.class)) {
						for (Property p : propSet.getOwnedProperties()) {
							ps.add(p);
						}
					}
					container = null;
				} else {
					container = container.eContainer();
				}
			}

			return Scopes.scopeFor(ps);

		} else if (cr instanceof SubcomponentRef) {
			NamedElement ne = ((SubcomponentRef) cr).getNamedElm();
			if (ne instanceof Subcomponent) {
				List<PropertyAssociation> pas = ((Subcomponent) ne).getOwnedPropertyAssociations();
				List<Property> ps = new ArrayList<>();
				for (PropertyAssociation pa : pas) {
					ps.add(pa.getProperty());
				}
				return Scopes.scopeFor(ps);
			}
		}

		return IScope.NULLSCOPE;
	}

	protected IScope scope_SubcomponentRef_namedElm(SubcomponentRef ctx, EReference ref) {
		EObject container = ((GetPropertyExpr) ctx.eContainer()).getContainingComponentImpl();
		if (container instanceof ComponentImplementation) {
			return Scopes.scopeFor(((ComponentImplementation) ctx).getAllSubcomponents());
		}
		return IScope.NULLSCOPE;
	}


	private Set<Element> getAllAgreeElements(EObject eobj) {
		Set<Element> result = new HashSet<>();
		if (eobj instanceof Classifier) {
			for (AnnexSubclause subclause : AnnexUtil.getAllAnnexSubclauses((Classifier) eobj,
					AgreePackage.eINSTANCE.getAgreeContractSubclause())) {
				if (subclause instanceof AgreeContractSubclause) {
					AgreeContractSubclause agreeSubclause = (AgreeContractSubclause) subclause;
					AgreeContract contract = (AgreeContract) agreeSubclause.getContract();
					result.addAll(getAllElementsFromSpecs(contract.getSpecs()));
				}
			}
		}
		return result;
	}

	private Set<Element> getAllElementsFromSpecs(EList<SpecStatement> specs) {
		Set<Element> result = new HashSet<>();
		for (SpecStatement spec : specs) {
			if (spec instanceof EqStatement) {
				EqStatement eq = (EqStatement) spec;
				result.addAll(eq.getLhs());
			} else if (spec instanceof InputStatement) {
				result.addAll(((InputStatement) spec).getLhs());
			} else {
				result.add(spec);
			}
		}
		return result;
	}

	protected Set<Element> getAadlElements(EObject ctx) {
		Set<Element> components = new HashSet<>();
		if (ctx instanceof ComponentType) {
			components.addAll(((ComponentType) ctx).getAllFeatures());

		} else if (ctx instanceof ComponentImplementation) {
			components.addAll(((ComponentImplementation) ctx).getAllSubcomponents());
			components.addAll(((ComponentImplementation) ctx).getAllConnections());
			components.addAll(getAadlElements(((ComponentImplementation) ctx).getType()));

		} else if (ctx instanceof Classifier) {
			components.addAll(((Classifier) ctx).getAllFeatures());

		} else if (ctx instanceof AadlPackage) {
			PublicPackageSection pubSec = ((AadlPackage) ctx).getPublicSection();
			for (Element el : pubSec.getOwnedElements()) {
				if (el instanceof DataImplementation || el instanceof DataType) {
					components.add(el);
				}
			}
			for (AnnexLibrary annex : AnnexUtil.getAllActualAnnexLibraries(((AadlPackage) ctx),
					AgreePackage.eINSTANCE.getAgreeContractLibrary())) {
				if (annex instanceof AgreeLibrary) {
					AgreeContract contract = (AgreeContract) ((AgreeContractLibrary) annex).getContract();
					components.addAll(getAllElementsFromSpecs(contract.getSpecs()));
				}
			}
			components.add((AadlPackage) ctx);

		}
		return components;
	}

	protected IScope getAadlScope(EObject eobj, EReference ref) {
		if (eobj != null) {
			Set<Element> components = getAadlElements(eobj);
			components.addAll(getAllAgreeElements(eobj));
			if (eobj instanceof AadlPackage) {
				return Scopes.scopeFor(components, getScope(eobj, ref));
			} else {
				return Scopes.scopeFor(components, getAadlScope(eobj.eContainer(), ref));
			}
		}
		return IScope.NULLSCOPE;
	}

	IScope scope_RecordUpdateExpr_key(RecordUpdateExpr ctx, EReference ref) {
		try {
			Type typ = AgreeTypeSystem.infer(ctx.getRecord());
			return Scopes.scopeFor(getFieldsFromRecordType(typ));
		} catch (Exception e) {
			return IScope.NULLSCOPE;
		}
	}


	protected IScope scope_ProjectionExpr_field(ProjectionExpr ctx, EReference ref) {
		try {
			Type typ = AgreeTypeSystem.infer(ctx.getExpr());
			return Scopes.scopeFor(getFieldsFromRecordType(typ));
		} catch (Exception e) {
			return IScope.NULLSCOPE;
		}
	}




}
